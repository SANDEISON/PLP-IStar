/* Func2Parser.java */
/* Generated By:JavaCC: Do not edit this line. Func2Parser.java */
package lf2.plp.functional2.parser;
import java.util.ArrayList;
import java.util.List;
//Imports da Funcional2
import lf2.plp.functional2.Programa;
import lf2.plp.functional2.declaration.DecRequisito;
import lf2.plp.functional2.declaration.DecFuncao;
import lf2.plp.functional1.declaration.DecComposta;
import lf2.plp.functional2.expression.ValorFuncao;
import lf2.plp.functional2.expression.ExpDeclaracao;
import lf2.plp.functional2.expression.Aplicacao;
//Imports da Funcional1
import lf2.plp.functional1.declaration.DeclaracaoFuncional;
import lf2.plp.functional1.declaration.DecVariavel;
import lf2.plp.functional1.expression.IfThenElse;
//Imports da Expressï¿½o2
import lf2.plp.expressions2.expression.Expressao;
import lf2.plp.expressions2.expression.Valor;
import lf2.plp.expressions2.expression.ValorInteiro;
import lf2.plp.expressions2.expression.ValorString;
import lf2.plp.expressions2.expression.ValorBooleano;
import lf2.plp.expressions2.expression.Id;
import lf2.plp.expressions2.expression.ExpMenos;
import lf2.plp.expressions2.expression.ExpNot;
import lf2.plp.expressions2.expression.ExpLength;
import lf2.plp.expressions2.expression.ExpSoma;
import lf2.plp.expressions2.expression.ExpSub;
import lf2.plp.expressions2.expression.ExpAnd;
import lf2.plp.expressions2.expression.ExpOr;
import lf2.plp.expressions2.expression.ExpEquals;
import lf2.plp.expressions2.expression.ExpConcat;

//Imports da Expressao1
public class Func2Parser implements Func2ParserConstants {
  public static void main(String args [])
  {
    Func2Parser parser;
    if (args.length == 0)
    {
      System.out.println("Funcional 2 PLP Parser Version 0.0.1:  Reading from standard input . . .");
      parser = new Func2Parser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Funcional 2 PLP Parser Version 0.0.1:  Reading from file " + args [0] + " . . .");
      try
      {
        parser = new Func2Parser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Funcional 2 PLP Parser Version 0.0.1:  File " + args [0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println("Funcional 2 PLP Parser Version 0.0.1:  Usage is one of:");
      System.out.println("         java Func2Parser < inputfile");
      System.out.println("OR");
      System.out.println("         java Func2Parser inputfile");
      return;
    }
    Programa programa = null;
    try
    {
      programa = parser.Input();

      if (!programa.checaTipo())
          {
            System.out.println("Funcional 2 PLP Parser Version 0.0.1: Erro! ");
        System.exit(0);
      }

      System.out.println("Funcional 2 PLP Parser Version 0.0.1: Funcional 2 program parsed successfully.");
    }
    catch (ParseException e)
    {
      e.printStackTrace();
      System.out.println("Funcional 2 PLP Parser Version 0.0.1: Encountered errors during parse.");
      System.exit(0);
    }
    try
    {
      System.out.println("Funcional 2 PLP Parser Version 0.0.1: running...");
      Valor val = (Valor) programa.executar();
      if (val instanceof ValorString)
      {
        ValorString valStr = (ValorString) val;
        System.out.println("Funcional 2 PLP Parser Version 0.0.1: resultado=" + valStr.valor());
      }
      else if (val instanceof ValorInteiro)
      {
        ValorInteiro valInt = (ValorInteiro) val;
        System.out.println("Funcional 2 PLP Parser Version 0.0.1: resultado=" + valInt.valor());
      }
      else if (val instanceof ValorBooleano)
      {
        ValorBooleano valBool = (ValorBooleano) val;
        System.out.println("Funcional 2 PLP Parser Version 0.0.1: resultado=" + valBool.valor());
      }
      else if (val instanceof ValorFuncao)
      {
        ValorFuncao valFunc = (ValorFuncao) val;
        System.out.println("Funcional 2 PLP Parser Version 0.0.1: resultado = " + val);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
      System.out.println("Funcional 2 PLP Parser Version 0.0.1:  Encountered errors during execution.");
    }
  }

  static final public Programa Input() throws ParseException {
    trace_call("Input");
    try {
Programa retorno;
      retorno = PPrograma();
      jj_consume_token(0);
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Input");
    }
}

  static final public Valor PValorInteiro() throws ParseException {
    trace_call("PValorInteiro");
    try {
Token token;
      token = jj_consume_token(INTEGER_LITERAL);
//System.out.println("ValorInteiro=" + token.toString());
    {if ("" != null) return new ValorInteiro(Integer.parseInt(token.toString()));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorInteiro");
    }
}

  static final public Valor PValorBooleano() throws ParseException {
    trace_call("PValorBooleano");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:{
        jj_consume_token(FALSE);
{if ("" != null) return new ValorBooleano(false);}
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
{if ("" != null) return new ValorBooleano(true);}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorBooleano");
    }
}

  static final public Valor PValorString() throws ParseException {
    trace_call("PValorString");
    try {
Token token;
      token = jj_consume_token(STRING_LITERAL);
//		System.out.println("ValorString=" + token.toString().length());
    String tokenStr = token.toString();
    tokenStr = tokenStr.substring(1, tokenStr.length() - 1);
    {if ("" != null) return new ValorString(tokenStr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorString");
    }
}

  static final public Valor PValorFuncao() throws ParseException {
    trace_call("PValorFuncao");
    try {
List lista = null;
  Expressao expressao;
      jj_consume_token(FN);
      lista = PListaId();
      jj_consume_token(DOT);
      expressao = PExpressao();
{if ("" != null) return new ValorFuncao(lista, expressao);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorFuncao");
    }
}

  static final public Valor PValor() throws ParseException {
    trace_call("PValor");
    try {
Valor retorno;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        retorno = PValorInteiro();
        break;
        }
      case TRUE:
      case FALSE:{
        retorno = PValorBooleano();
        break;
        }
      case STRING_LITERAL:{
        retorno = PValorString();
        break;
        }
      case FN:{
        retorno = PValorFuncao();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValor");
    }
}

  static final public Id PId() throws ParseException {
    trace_call("PId");
    try {
Token token;
      token = jj_consume_token(IDENTIFIER);
//System.out.println("Id=" + token.toString());
    //System.out.println("tam id=" + token.toString().length());
    String tokenStr = token.toString();
    //		tokenStr = tokenStr.substring(1,tokenStr.length()-1);
    {if ("" != null) return new Id(tokenStr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PId");
    }
}

  static final public Expressao PExpMenos() throws ParseException {
    trace_call("PExpMenos");
    try {
Expressao retorno;
      jj_consume_token(MINUS);
      retorno = PExpPrimaria();
{if ("" != null) return new ExpMenos(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpMenos");
    }
}

  static final public Expressao PExpNot() throws ParseException {
    trace_call("PExpNot");
    try {
Expressao retorno;
      jj_consume_token(NOT);
      retorno = PExpPrimaria();
{if ("" != null) return new ExpNot(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpNot");
    }
}

  static final public Expressao PExpLength() throws ParseException {
    trace_call("PExpLength");
    try {
Expressao retorno;
      jj_consume_token(LENGTH);
      retorno = PExpPrimaria();
if (retorno instanceof ValorString)
    {
      ValorString val = (ValorString) retorno;
      //		    System.out.println("Length val=" + val.valor());
    }
    //		System.out.println("1-" + retorno.toString());
    {if ("" != null) return new ExpLength(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpLength");
    }
}

  static final public Expressao PExpPrimaria() throws ParseException {
    trace_call("PExpPrimaria");
    try {
Expressao retorno;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case FN:
      case INTEGER_LITERAL:
      case STRING_LITERAL:{
        retorno = PValor();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        if (jj_2_1(2147483647)) {
          retorno = PAplicacao();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            retorno = PId();
            break;
            }
          case LPAREN:{
            jj_consume_token(LPAREN);
            retorno = PExpressao();
            jj_consume_token(RPAREN);
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpPrimaria");
    }
}

  static final public Expressao PAplicacao() throws ParseException {
    trace_call("PAplicacao");
    try {
Id id;
  List lista;
      id = PId();
      jj_consume_token(LPAREN);
      lista = PListaExpr();
      jj_consume_token(RPAREN);
{if ("" != null) return new Aplicacao(id, lista);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PAplicacao");
    }
}

  static final public List PListaId() throws ParseException {
    trace_call("PListaId");
    try {
List retorno = null;
  Id id;
      label_1:
      while (true) {
        id = PId();
if (retorno == null)
      {
        retorno = new ArrayList();
        retorno.add(id);
      }
      else
      {
        retorno.add(id);
      }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PListaId");
    }
}

  static final public DeclaracaoFuncional PDeclVar() throws ParseException {
    trace_call("PDeclVar");
    try {
Id id;
  Expressao expressao;
  DeclaracaoFuncional retorno;
      jj_consume_token(VAR);
      id = PId();
      jj_consume_token(ASSIGN);
      expressao = PExpressao();
{if ("" != null) return new DecVariavel(id, expressao);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclVar");
    }
}

  static final public DeclaracaoFuncional PDeclFuncao() throws ParseException {
    trace_call("PDeclFuncao");
    try {
Id id;
  Expressao expressao;
  DeclaracaoFuncional retorno;
  List lista;
  DecRequisito decRequisito;
      decRequisito = PDeclRequisito();
      jj_consume_token(FUNC);
      id = PId();
      lista = PListaId();
      jj_consume_token(ASSIGN);
      expressao = PExpressao();
{if ("" != null) return new DecFuncao(id, new ValorFuncao(lista, expressao), decRequisito);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclFuncao");
    }
}

  static final public DecRequisito PDeclRequisito() throws ParseException {
    trace_call("PDeclRequisito");
    try {
List lista;
      jj_consume_token(REQ);
      lista = PListaId();
{if ("" != null) return new DecRequisito(lista);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclRequisito");
    }
}

  static final public DecComposta PDecComposta() throws ParseException {
    trace_call("PDecComposta");
    try {
DeclaracaoFuncional d1;
        DeclaracaoFuncional d2;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        d1 = PDeclVar();
        break;
        }
      case REQ:{
        d1 = PDeclFuncao();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      d2 = PDeclFuncional();
{if ("" != null) return new DecComposta(d1, d2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDecComposta");
    }
}

  static final public DeclaracaoFuncional PDeclFuncional() throws ParseException {
    trace_call("PDeclFuncional");
    try {
DeclaracaoFuncional decl;
      if (jj_2_2(2147483647)) {
        decl = PDecComposta();
      } else if (jj_2_3(2147483647)) {
        decl = PDecComposta();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          decl = PDeclVar();
          break;
          }
        case REQ:{
          decl = PDeclFuncao();
          break;
          }
        case LPAREN:{
          jj_consume_token(LPAREN);
          decl = PDeclFuncional();
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return decl;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclFuncional");
    }
}

  static final public Expressao PExpDeclaracao() throws ParseException {
    trace_call("PExpDeclaracao");
    try {
DeclaracaoFuncional declaracoes;
  Expressao expressao;
      jj_consume_token(LET);
      declaracoes = PDeclFuncional();
      jj_consume_token(IN);
      expressao = PExpressao();
{if ("" != null) return new ExpDeclaracao(declaracoes, expressao);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpDeclaracao");
    }
}

  static final public Expressao PExpCondicional() throws ParseException {
    trace_call("PExpCondicional");
    try {
Expressao expCond, expThen, expElse;
      jj_consume_token(IF);
      expCond = PExpressao();
      jj_consume_token(THEN);
      expThen = PExpressao();
      jj_consume_token(ELSE);
      expElse = PExpressao();
{if ("" != null) return new IfThenElse(expCond, expThen, expElse);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpCondicional");
    }
}

  static final public List PListaExpr() throws ParseException {
    trace_call("PListaExpr");
    try {
List retorno = null;
  Expressao expr;
      expr = PExpressao();
retorno = new ArrayList();
      retorno.add(expr);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        expr = PExpressao();
retorno.add(expr);
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PListaExpr");
    }
}

  static final public Expressao PExpUnaria() throws ParseException {
    trace_call("PExpUnaria");
    try {
Expressao retorno;
      if (jj_2_4(2147483647)) {
        retorno = PExpMenos();
      } else if (jj_2_5(2147483647)) {
        retorno = PExpNot();
      } else if (jj_2_6(2147483647)) {
        retorno = PExpLength();
      } else if (jj_2_7(2147483647)) {
        retorno = PExpDeclaracao();
      } else if (jj_2_8(2147483647)) {
        retorno = PExpCondicional();
      } else if (jj_2_9(2147483647)) {
        retorno = PExpPrimaria();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpUnaria");
    }
}

  static final public Expressao PExpBinaria() throws ParseException {
    trace_call("PExpBinaria");
    try {
Expressao retorno, param2;
  Id id;
  List list = null;
      retorno = PExpBinaria2();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case EQ:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
          param2 = PExpBinaria2();
retorno = new ExpEquals(retorno, param2);
          break;
          }
        case LPAREN:{
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NOT:
          case LENGTH:
          case TRUE:
          case FALSE:
          case LET:
          case IF:
          case FN:
          case INTEGER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case MINUS:{
            list = PListaExpr();
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
retorno = new Aplicacao((Expressao) retorno, list);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpBinaria");
    }
}

  static final public Expressao PExpBinaria2() throws ParseException {
    trace_call("PExpBinaria2");
    try {
Expressao retorno, param2;
  Id id;
  List list = null;
      retorno = PExpBinaria3();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:
        case CONCAT:
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          param2 = PExpBinaria3();
retorno = new ExpSoma(retorno, param2);
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          param2 = PExpBinaria3();
retorno = new ExpSub(retorno, param2);
          break;
          }
        case OR:{
          jj_consume_token(OR);
          param2 = PExpBinaria3();
retorno = new ExpOr(retorno, param2);
          break;
          }
        case CONCAT:{
          jj_consume_token(CONCAT);
          param2 = PExpBinaria3();
retorno = new ExpConcat(retorno, param2);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpBinaria2");
    }
}

  static final public Expressao PExpBinaria3() throws ParseException {
    trace_call("PExpBinaria3");
    try {
Expressao retorno, param2;
  Id id;
  List list = null;
      retorno = PExpUnaria();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(AND);
        param2 = PExpUnaria();
retorno = new ExpAnd(retorno, param2);
      }
//System.out.println("ExpressaoBinaria=" + retorno);
    {if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpBinaria3");
    }
}

  static final public Expressao PExpressao() throws ParseException {
    trace_call("PExpressao");
    try {
Expressao retorno;
      retorno = PExpBinaria();
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpressao");
    }
}

  static final public Programa PPrograma() throws ParseException {
    trace_call("PPrograma");
    try {
Expressao retorno;
      retorno = PExpressao();
//System.out.println("Expressao=" + retorno);
    {if ("" != null) return new Programa(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PPrograma");
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_PDeclFuncional_564_5_29()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PDeclFuncional_557_3_18()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PDeclFuncional_563_5_28()
 {
    if (jj_3R_PDeclFuncao_517_3_8()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_374_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PValor_375_5_35()) {
    jj_scanpos = xsp;
    if (jj_3R_PValor_376_5_36()) {
    jj_scanpos = xsp;
    if (jj_3R_PValor_377_5_37()) {
    jj_scanpos = xsp;
    if (jj_3R_PValor_378_5_38()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PDeclFuncional_562_5_27()
 {
    if (jj_3R_PDeclVar_500_3_7()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclFuncional_560_5_26()
 {
    if (jj_3R_PDecComposta_544_9_34()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_655_3_23()
 {
    if (jj_3R_PExpBinaria2_681_3_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PExpBinaria_658_7_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_PDeclFuncional_558_5_25()
 {
    if (jj_3R_PDecComposta_544_9_34()) return true;
    return false;
  }

  static private boolean jj_3R_PAplicacao_462_3_31()
 {
    if (jj_3R_PId_390_3_6()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PListaExpr_601_3_39()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PDeclFuncional_557_3_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PDeclFuncional_558_5_25()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclFuncional_560_5_26()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclFuncional_562_5_27()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclFuncional_563_5_28()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclFuncional_564_5_29()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_PExpPrimaria_444_3_14()) return true;
    return false;
  }

  static private boolean jj_3R_PDecComposta_546_11_45()
 {
    if (jj_3R_PDeclFuncao_517_3_8()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_PExpCondicional_588_3_13()) return true;
    return false;
  }

  static private boolean jj_3R_PValorFuncao_363_3_49()
 {
    if (jj_scan_token(FN)) return true;
    if (jj_3R_PListaId_474_3_17()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PDecComposta_545_11_44()
 {
    if (jj_3R_PDeclVar_500_3_7()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_PId_390_3_6()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_PExpDeclaracao_577_3_12()) return true;
    return false;
  }

  static private boolean jj_3R_PDecComposta_544_9_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PDecComposta_545_11_44()) {
    jj_scanpos = xsp;
    if (jj_3R_PDecComposta_546_11_45()) return true;
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PDeclFuncional_557_3_18()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_PExpLength_427_3_11()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_640_5_65()
 {
    if (jj_3R_PExpPrimaria_444_3_14()) return true;
    return false;
  }

  static private boolean jj_3R_PExpressao_737_3_15()
 {
    if (jj_3R_PExpBinaria_655_3_23()) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_449_5_22()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_448_5_21()
 {
    if (jj_3R_PId_390_3_6()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_PExpNot_416_3_10()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_637_5_64()
 {
    if (jj_3R_PExpCondicional_588_3_13()) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_446_5_20()
 {
    if (jj_3R_PAplicacao_462_3_31()) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_445_5_19()
 {
    if (jj_3R_PValor_374_3_30()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_PExpMenos_405_3_9()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_634_5_63()
 {
    if (jj_3R_PExpDeclaracao_577_3_12()) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_444_3_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpPrimaria_445_5_19()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpPrimaria_446_5_20()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpPrimaria_448_5_21()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpPrimaria_449_5_22()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpUnaria_631_5_62()
 {
    if (jj_3R_PExpLength_427_3_11()) return true;
    return false;
  }

  static private boolean jj_3R_PValorString_348_3_48()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_628_5_61()
 {
    if (jj_3R_PExpNot_416_3_10()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria3_720_7_52()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_PExpUnaria_624_3_51()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_625_5_60()
 {
    if (jj_3R_PExpMenos_405_3_9()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclRequisito_530_3_16()
 {
    if (jj_scan_token(REQ)) return true;
    if (jj_3R_PListaId_474_3_17()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_624_3_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpUnaria_625_5_60()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_628_5_61()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_631_5_62()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_634_5_63()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_637_5_64()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_640_5_65()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PValorBooleano_337_3_59()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria3_717_3_40()
 {
    if (jj_3R_PExpUnaria_624_3_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PExpBinaria3_720_7_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_PValorBooleano_333_3_58()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_PValorBooleano_333_3_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PValorBooleano_333_3_58()) {
    jj_scanpos = xsp;
    if (jj_3R_PValorBooleano_337_3_59()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PExpLength_427_3_11()
 {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_PExpPrimaria_444_3_14()) return true;
    return false;
  }

  static private boolean jj_3R_PListaExpr_608_7_50()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclFuncao_517_3_8()
 {
    if (jj_3R_PDeclRequisito_530_3_16()) return true;
    if (jj_scan_token(FUNC)) return true;
    if (jj_3R_PId_390_3_6()) return true;
    if (jj_3R_PListaId_474_3_17()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria2_699_7_56()
 {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_PExpBinaria3_717_3_40()) return true;
    return false;
  }

  static private boolean jj_3R_PValorInteiro_322_3_46()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_PExpNot_416_3_10()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_PExpPrimaria_444_3_14()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria2_694_7_55()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_PExpBinaria3_717_3_40()) return true;
    return false;
  }

  static private boolean jj_3R_PListaExpr_601_3_39()
 {
    if (jj_3R_PExpressao_737_3_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PListaExpr_608_7_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_PExpBinaria2_689_7_54()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_PExpBinaria3_717_3_40()) return true;
    return false;
  }

  static private boolean jj_3R_PExpMenos_405_3_9()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_PExpPrimaria_444_3_14()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclVar_500_3_7()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_PId_390_3_6()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria2_684_7_53()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_PExpBinaria3_717_3_40()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria2_684_7_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpBinaria2_684_7_53()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria2_689_7_54()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria2_694_7_55()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria2_699_7_56()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpCondicional_588_3_13()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria2_681_3_32()
 {
    if (jj_3R_PExpBinaria3_717_3_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PExpBinaria2_684_7_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_PExpBinaria_663_20_57()
 {
    if (jj_3R_PListaExpr_601_3_39()) return true;
    return false;
  }

  static private boolean jj_3R_PId_390_3_6()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_PExpDeclaracao_577_3_12()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_PDeclFuncional_557_3_18()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_PExpressao_737_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_663_7_43()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpBinaria_663_20_57()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PListaId_475_5_24()
 {
    if (jj_3R_PId_390_3_6()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_PDeclFuncao_517_3_8()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_PValor_378_5_38()
 {
    if (jj_3R_PValorFuncao_363_3_49()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_PDeclVar_500_3_7()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_PValor_377_5_37()
 {
    if (jj_3R_PValorString_348_3_48()) return true;
    return false;
  }

  static private boolean jj_3R_PListaId_474_3_17()
 {
    Token xsp;
    if (jj_3R_PListaId_475_5_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PListaId_475_5_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_PValor_376_5_36()
 {
    if (jj_3R_PValorBooleano_333_3_47()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_658_7_42()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_PExpBinaria2_681_3_32()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_375_5_35()
 {
    if (jj_3R_PValorInteiro_322_3_46()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_658_7_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpBinaria_658_7_42()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_663_7_43()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Func2ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x6000,0x11406000,0x11406000,0x20000000,0x20000000,0x810000,0x810000,0x0,0x0,0x3144f800,0x0,0x400,0x400,0x200,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x80,0x10001,0x1000001,0x10001,0x1c00000,0x1c00000,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public Func2Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Func2Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new Func2ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Func2Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new Func2ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new Func2ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Func2Parser(Func2ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Func2ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 14; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 9; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
